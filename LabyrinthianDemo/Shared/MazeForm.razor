@inject MazeState MazeState
@inject ISnackbar Snackbar

<MudGrid Justify="Justify.Center">
	<!-- Maze section -->
	<MudItem xs="12" sm="11" md="10" lg="5" xl="4">
		<MudPaper Class="pa-4">
			<MudText Typo="Typo.h5">Maze</MudText>
			<MudSelect T="MazeType" Label="Maze type" @bind-Value="mazeType">
				@foreach (MazeType mazeType in Enum.GetValues(typeof(MazeType)))
				{
					<MudSelectItem T="MazeType" Value="@mazeType">
						@mazeType.ToHumanReadableString()
					</MudSelectItem>
				}
			</MudSelect>
			<MudText Typo="Typo.h6">Size</MudText>
			<!-- Maze size selection -->
			@switch (mazeType)
			{
				<!-- Rectangular sizes -->
				case MazeType.Orthogonal or
					MazeType.RectangularDelta or
					MazeType.RectangularSigma or
					MazeType.Upsilon or
					MazeType.AlternativeUpsilon:
					<MudNumericField @bind-Value="width" Label="Width" Min="2" Max="100" />
					<MudNumericField @bind-Value="height" Label="Height" Min="2" Max="100" />
					if (mazeType != MazeType.AlternativeUpsilon)
					{
						<MudNumericField @bind-Value="inWidth" Label="Inner width" Min="0" Max="@(width - 2)" />
						<MudNumericField @bind-Value="inHeight" Label="Inner height" Min="0" Max="@(height - 2)" />
					}
					break;
				<!-- Hexagonal/Triangular sizes -->
				case MazeType.HexagonalSigma or MazeType.HexagonalDelta or
					MazeType.TriangularDelta:
					<MudNumericField @bind-Value="sideLength" Label="Side length" Min="2" Max="100" />
					<MudNumericField @bind-Value="inSideLength" Label="Inner side length" Min="2" Max="@(sideLength - 2)" />
					break;
				<!-- Circular sizes -->
				case MazeType.Theta:
					<MudNumericField @bind-Value="radius" Label="Radius" Min="3" Max="100" />
					<MudNumericField @bind-Value="inRadius" Label="Inner radius" Min="0" Max="@(radius - 2)" />
					<MudNumericField @bind-Value="segments" Label="Segments" Min="5" Max="150" />
					break;
			}
		</MudPaper>
	</MudItem>
	<!-- Generation section -->
	<MudItem xs="12" sm="11" md="10" lg="5" xl="4">
		<MudPaper Class="pa-4">
			<MudText Typo="Typo.h5">Generation</MudText>
			<MudSelect T="GenerationAlgorithm" Label="Generation algorithm" @bind-Value="algorithm">
				@foreach (GenerationAlgorithm algorithm in Enum.GetValues(typeof(GenerationAlgorithm)))
				{
					<MudSelectItem T="GenerationAlgorithm"
								   Disabled="IsAlgorithmDisabled(algorithm)"
								   Value="@algorithm">
						@algorithm.ToHumanReadableString()
					</MudSelectItem>
				}
			</MudSelect>
			<!-- Seed section -->
			<MudTextField @bind-Value="seed" Disabled="@useRandomSeed"
						  Label="Seed" />
			<MudCheckBox @bind-Checked="useRandomSeed"
						 Label="Random seed" Color="Color.Primary" />
			<!-- Step-by-step generation section -->
			<MudCheckBox @bind-Checked="generateStepByStep"
						 Label="Generate step by step" Color="Color.Primary" />
			<MudSlider @bind-Value="generationSpeed"
					   Min="0.0" Max="1.0" Step="0.01"
					   Disabled="!generateStepByStep">
				Generation speed
			</MudSlider>
			<MudStack Row="true">
				@if (generating && generateStepByStep)
				{
					<MudButton OnClick="OnGenerateButtonClicked"
							   Color="Color.Tertiary" Variant="Variant.Filled">
						Regenerate
					</MudButton>
				}
				else
				{
					<MudButton OnClick="OnGenerateButtonClicked"
							   Color="Color.Primary" Variant="Variant.Filled">
						Generate
					</MudButton>
				}
			</MudStack>
		</MudPaper>
	</MudItem>
</MudGrid>

@code {
	// Flag that indicates whether maze is currently being generated
	private bool generating { get; set; } = false;
	// Cancelation token source for Generate method
	private CancellationTokenSource? _generateCancellationSource;

	private GenerationAlgorithm algorithm { get; set; }
	private MazeType mazeType { get; set; }

	// Rectangular sizes
	private int width { get; set; } = 15;
	private int height { get; set; } = 15;
	private int inWidth { get; set; } = 0;
	private int inHeight { get; set; } = 0;
	// Hexagonal/Triangular sizes
	private int sideLength { get; set; } = 10;
	private int inSideLength { get; set; } = 0;
	// Circular sizes
	private int radius { get; set; } = 15;
	private int inRadius { get; set; } = 0;
	private int segments { get; set; } = 20;

	// Seed
	private int seed { get; set; }
	private bool useRandomSeed { get; set; } = true;

	// Step-by-step generation
	private const double MinGenerationTimeS = 1.5, MaxGenerationTimeS = 0.01;
	private double generationSpeed { get; set; } = 1.0;
	private bool generateStepByStep { get; set; } = false;

	protected override void OnInitialized()
	{
		RegenerateSeed();
	}

	// Regenerates a maze generation seed
	private void RegenerateSeed()
	{
		seed = Random.Shared.Next();
	}

	// Checks whether generation algorithm is compatible with current maze type
	private bool IsAlgorithmDisabled(GenerationAlgorithm algorithm)
	{
		// All algorithms support orthogonal mazes without inner room
		if (mazeType == MazeType.Orthogonal && (inWidth == 0 || inHeight == 0))
			return false;

		// These algorithms are compatible only with orthogonal and theta mazes
		return algorithm == GenerationAlgorithm.BinaryTree ||
			algorithm == GenerationAlgorithm.RecursiveDivision ||
			algorithm == GenerationAlgorithm.Sidewinder;
	}

	// When "Generate" button was clicked
	private async Task OnGenerateButtonClicked()
	{
		// Cancel previous generation
		if (_generateCancellationSource != null)
		{
			_generateCancellationSource.Cancel();
		}
		// Start new generation
		_generateCancellationSource = new();
		await Generate(_generateCancellationSource.Token);
	}

	// When "Cancel" button was clicked
	private void OnCancelButtonClicked()
	{
		if (_generateCancellationSource != null)
		{
			_generateCancellationSource.Cancel();
			generating = false;
		}
	}

	// Generate a maze based on user input
	private async Task Generate(CancellationToken cancellationToken)
	{
		// Check if the maze type and the algorithm are compatible
		if (IsAlgorithmDisabled(algorithm))
		{
			Snackbar.Add("Algorithm and maze parameters are not compatible", Severity.Error);
			return;
		}
		generating = true;
		// Select a maze type
		Maze maze = mazeType switch
		{
			MazeType.Orthogonal => new OrthogonalMaze(width, height, inWidth, inHeight),
			MazeType.Theta => new ThetaMaze(radius, inRadius, segments),
			MazeType.TriangularDelta => new DeltaMaze(sideLength, inSideLength),
			MazeType.RectangularDelta => new DeltaMaze(width, height, inWidth, inHeight),
			MazeType.HexagonalDelta => DeltaMaze.CreateHexagonal(sideLength, inSideLength),
			MazeType.RectangularSigma => new SigmaMaze(width, height, inWidth, inHeight),
			MazeType.HexagonalSigma => new SigmaMaze(sideLength, inSideLength),
			MazeType.Upsilon => new UpsilonMaze(width, height, inWidth, inHeight),
			MazeType.AlternativeUpsilon => new AlternativeUpsilonMaze(width, height),
			_ => throw new InvalidOperationException("Invalid maze type was selected")
		};
		// Select a seed
		if (useRandomSeed)
		{
			RegenerateSeed();
		}
		// Select a generation algorithm
		MazeGenerator generator = algorithm switch
		{
			GenerationAlgorithm.AldousBroder => new AldousBroderGeneration(maze, seed),
			GenerationAlgorithm.BinaryTree => new BinaryTreeGeneration(maze, seed),
			GenerationAlgorithm.DepthFirstSearch => new DFSGeneration(maze, seed),
			GenerationAlgorithm.EdgeBasedPrim => new EdgeBasedPrimGeneration(maze, seed),
			GenerationAlgorithm.GrowingTree => new GrowingTreeGeneration(maze, seed),
			GenerationAlgorithm.HuntAndKill => new HuntAndKillGeneration(maze, seed),
			GenerationAlgorithm.Kruskal => new KruskalGeneration(maze, seed),
			GenerationAlgorithm.Prim => new PrimGeneration(maze, seed),
			GenerationAlgorithm.RecursiveBacktracker => new RecursiveBacktrackerGeneration(maze, seed),
			GenerationAlgorithm.RecursiveDivision => new RecursiveDivisionGeneration(maze, seed),
			GenerationAlgorithm.Sidewinder => new SidewinderGeneration(maze, seed),
			GenerationAlgorithm.Wilson => new WilsonGeneration(maze, seed),
			_ => throw new InvalidOperationException("Invalid generation algorithm was selected")
		};
		// Generate a maze
		foreach (var _ in generator.GenerateStepByStep())
		{
			if (generateStepByStep)
			{
				// Wait before the next step
				double intervalS =
						MaxGenerationTimeS * generationSpeed + MinGenerationTimeS * (1.0 - generationSpeed);
				await Task.Delay(TimeSpan.FromSeconds(intervalS));

				if (cancellationToken.IsCancellationRequested)
					return;

				// Update the state
				await MazeState.UpdateMazeAsync(maze);
			}
		}
		// Update the state
		if (!cancellationToken.IsCancellationRequested)
		{
			await MazeState.UpdateMazeAsync(maze);
			generating = false;
		}
	}
}