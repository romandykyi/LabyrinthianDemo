@using System.Xml
@inject MazeState MazeState
@inject SvgRendererState RendererState
@inject IJSRuntime JS

@if (MazeState.Maze != null)
{
	<MudText Typo="Typo.h6" Align="Align.Center">@MazeState.Maze.ToString()</MudText>
	<MudGrid Justify="Justify.Center">
		<MudItem xs="12" sm="12" md="8" lg="6">
			@mazeSvg
			@if (MazeState.IsGenerated)
			{
				<MudButton Class="align-center"
						   StartIcon="@Icons.Material.Filled.Save"
						   Variant="Variant.Outlined" Color="Color.Surface"
						   OnClick="ExportSvg">
					Save as SVG
				</MudButton>
			}
		</MudItem>
	</MudGrid>
}

@code {
	private MarkupString mazeSvg { get; set; } = new();

	// Update state of the maze
	private async Task OnMazeUpdated()
	{
		if (MazeState.Generator == null) return;
		MazeSvgExporter? exporter = RendererState.GetExporter(MazeState.Generator, true);

		// Export maze into a string
		using StringWriter stringWriter = new();
		using (SvgWriter svgWriter = new(stringWriter))
		{
			await exporter.ExportAsync(svgWriter);
		}
		// Render an SVG
		mazeSvg = new(stringWriter.ToString());
		StateHasChanged();
	}

	// Export maze into SVG format
	private async Task ExportSvg()
	{
		if (MazeState.Generator == null || !MazeState.IsGenerated) return;
		MazeSvgExporter exporter = RendererState.GetExporter(MazeState.Generator);
		
		// Save a maze into a memory stream
		MemoryStream memoryStream = new();
		XmlWriterSettings xmlSettings = new()
			{
				Async = true,
				Indent = RendererState.Indent
			};
		using StreamWriter streamWriter = new(memoryStream);
		using (SvgWriter svgWriter = new(streamWriter, xmlSettings))
		{
			await exporter.ExportAsync(svgWriter);
		}
		await streamWriter.FlushAsync();
		memoryStream.Seek(0, SeekOrigin.Begin);

		// Extract a file name from the description of the maze
		string description = MazeState.Maze!.Description;
		string fileName = $"{description[0..description.IndexOf(" generated")]}.svg";

		// Save a file
		using DotNetStreamReference streamRef = new(memoryStream);
		await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
	}

	protected override void OnInitialized()
	{
		MazeState.StateChanged += OnMazeUpdated;
	}
}
