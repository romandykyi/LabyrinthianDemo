@inject MazeState MazeState

@if (MazeState.Maze != null)
{
	<MudText Typo="Typo.h6" Align="Align.Center">@MazeState.Maze.ToString()</MudText>
}
<MudGrid Justify="Justify.Center">
	<MudItem xs="12" sm="12" md="8" lg="6">
		@mazeSvg
	</MudItem>
</MudGrid>

@code {
	private MarkupString mazeSvg { get; set; } = new();

	// IEnumerable for selected cell of generator
	private IEnumerable<MazeCell> SelectedCellEnumerable(MazeGenerator generator)
	{
		if (generator.SelectedCell != null)
			yield return generator.SelectedCell;
	}

	private async Task OnMazeUpdated()
	{
		Maze? maze = MazeState.Maze;
		if (maze == null) return;
		// Generator cannot be null if maze is not null
		MazeGenerator generator = MazeState.Generator!;

		// Group for unvisited cells
		SvgGroup unvisitedCellsGroup = new()
			{
				Fill = SvgColor.FromHexCode("#111111"),
				Stroke = SvgColor.FromHexCode("#111111")
			};
		// Group for highlighted cells
		SvgGroup highilightedCellsGroup = new()
			{
				Fill = SvgColor.Gray,
				Stroke = SvgColor.Gray
			};
		// Group for selected cell
		SvgGroup selectedCellGroup = new()
			{
				Fill = SvgColor.Red,
				Stroke = SvgColor.Red
			};

		// Create a maze exporter
		MazeSvgExporter exporter = new(maze, padding: 5f)
		{
			// Unvisited cells that also are not highlighted
                Cells.Selected(
					maze.Cells.Where(c => !generator.VisitedCells[c] && !generator.HighlightedCells[c]),
					unvisitedCellsGroup),
                // Highlighted cells
                Cells.Selected(
					maze.Cells.Where(c => generator.HighlightedCells[c]),
					highilightedCellsGroup),
                // Selected cell
                Cells.Selected(SelectedCellEnumerable(generator), selectedCellGroup),
                // Walls
                Walls.AsOnePath()
		};
		// Export maze into a string
		using StringWriter stringWriter = new();
		using (SvgWriter svgWriter = new(stringWriter))
		{
			await exporter.ExportAsync(svgWriter);
		}
		// Render an SVG
		mazeSvg = new(stringWriter.ToString());
		StateHasChanged();
	}

	protected override void OnInitialized()
	{
		MazeState.StateChanged += OnMazeUpdated;
	}
}
