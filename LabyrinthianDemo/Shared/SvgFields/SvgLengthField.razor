<MudStack Row="true">
	<MudNumericField T="float" @bind-Value="value" @bind-Value:after="Update" Label="@Label" />
	<MudSelect @bind-Value="unit" @bind-Value:after="Update">
		<MudSelectItem Value="SvgLengthUnit.None">none</MudSelectItem>
		<MudSelectItem Value="SvgLengthUnit.Pixel">px</MudSelectItem>
		<MudSelectItem Value="SvgLengthUnit.Percentage">%</MudSelectItem>
		<MudSelectItem Value="SvgLengthUnit.Centimeter">cm</MudSelectItem>
		<MudSelectItem Value="SvgLengthUnit.Millimeter">mm</MudSelectItem>
		<MudSelectItem Value="SvgLengthUnit.Em">em</MudSelectItem>
		<MudSelectItem Value="SvgLengthUnit.Ex">ex</MudSelectItem>
		<MudSelectItem Value="SvgLengthUnit.Point">pt</MudSelectItem>
		<MudSelectItem Value="SvgLengthUnit.Pica">pc</MudSelectItem>
		<MudSelectItem Value="SvgLengthUnit.Inch">in</MudSelectItem>
	</MudSelect>
</MudStack>

@code {
	private bool enabled { get; set; }
	private float value { get; set; }
	private SvgLengthUnit unit { get; set; }

	[Parameter]
	public string Label { get; set; } = "";
	[Parameter]
	public SvgLength? Length { get; set; }
	[Parameter]
	public EventCallback<SvgLength?> LengthChanged { get; set; }

	private async Task Update()
	{
		Length = new(value, unit);
		await LengthChanged.InvokeAsync(Length);
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
	}
}
